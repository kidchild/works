================
项目流程操作清单
================

:Author:
  许艺华
:Contact:
  xuyihua AT cn-acg DOT com
:Contributors:
  叶希良, 蔡倩彦, 李云, 沈辉

.. contents::

前言
====

英文版的 the-process.rst 更多是从一个全景的角度试图去给大家把流程画个鸟瞰图, 以让我们能看清楚整个故事是怎么样的, 为什么这样.

这份文档则将更多从实际操作角度, 为在项目中担当不同角色的同学们提供一份实实在在可操作, 可验证 - test-able :) - 的清单, 我想, 只要把这些清单上的东西一件件做好, 我们项目的成功就会有一个相当坚实的基础 :)

下面, 我就按项目阶段和角色, 从我们开发团队的角度 (不含 BA/EM) 去说明 **每个阶段, 不同角色, 应该做好的任务清单**.

.. IMPORTANT::
  BA 是客户的 **全权代表**, BA 保证他/她给开发团队的所有反馈都是 EM 及客户正式认可的 - **文档可溯** 的.

起始阶段的角色任务清单
======================

阶段特点及参与人员
------------------

项目起始阶段的特点是:

 - 需求未明: EM 跟客户有了初步接触, 得到了一些最原始形态的 "需求";
 - 团队暂无: 由于需求未明, 暂时不足以判断团队构成;
 - 开支不定: 由于团队暂无, 而项目开支最终是要以 "人周" 为单位的, 这个时候, 我们还无法算出公司需要投入的预算.

基于如上特点, 这个时期的关键任务包括:

 - 明晰关键需求
 - 构建合适团队
 - 形成项目计划

这些任务的完成, 主要的担子落在 PL 身上, 在必要情况下, 我们还需要 Architect 的支持.

PL 的任务清单
-------------

 - 我阅读了项目相关的所有文档了吗? (GH 帖子, 相关的 doc/xls)
 - 我能把项目的关键想法 (Key Ideas) 用简单的三到五点把别人说懂吗? 
 - 关键想法之外的其他故事是否都能用常识 (Common Sense) 填空?
 - BA 认可我小结的项目关键想法列表吗?
 - 关键想法足以帮我决定系统的关键结构了吗? (必要的话找架构师帮忙)
 - 根据 BA 的反馈以及我对系统的把握, 我能把 User Stories/Key Ideas 按轻重缓急列出来么?
 - 这些 User Stories/Key Ideas 间有依赖么? (不仅是系统内的, 技术层面上的依赖, 还包括需求上对客户的依赖)
 - 我能根据依赖关系画出 Functionality Dependency Tree 么?
 - 决定系统的关键结构之后, 我知道需要具备哪些技能集的人吗?
 - 我需要哪些人? 几个人? 
 - 我能给出 Overall Plan 吗? (资源上要给出串行估算和并行估算)

以上有任何一个问题为否的话, 我都需要和 BA 继续交流, 直到得到确定的答案.

Architect 的任务清单
--------------------

 - 根据 PL 给的对项目 Key Ideas 的描述, 我能预知/预感到多少架构上的场景/风险?
 - 我们采取什么样的技术架构最省时最有效?
 - 可能的风险点我们可否折衷绕过? 不行的话, 切入思路如何? 需要什么/多少资源? 后备方案是什么?
 - PL 的资源估算是否恰当? 不恰当处原因为何? 调整方案?

迭代阶段的角色任务清单
======================

阶段特点及参与人员
------------------

当 PL 把 Overall Plan 完成并提交公司确认后 (也意味着客户接受我们的 LOP 了), 项目就进入正式的迭代过程.

迭代过程中我们可以把项目大概分成三个时期, 它们的基本特点如下:

 - 前期: 大部分需求未稳定, 关键需求有部分稳定, 有部分逐步浮现; 其他需求不断添加细化.
 - 中期: Key Ideas 需求都已明确, 拦路石必须已被清除; 其他需求更多进入细化调整.
 - 后期: 所有稳定版的 US/ATs 应已完成, 重点在系统的清理, 打磨.

.. Note::
  项目进入第一个迭代的先决条件是, 将 *深远影响系统结构* 的关键需求都至少有一个稳定版的 US/ATs. 所谓 *深远影响系统结构* 由 PL (必要时要由 Architect 甚至公司架构组) 来决定.

在项目确认可以进入第一个迭代后, 项目中各个角色的工作将是可重复操作的.

PL 的任务清单
-------------

迭代开始前
``````````

 - 在第一个迭代开始前, 我要为团队构造好支持环境, 包括场地, 开发环境, 测试环境
 - 根据 Functionality Dependency Tree, 确保下个迭代要做的 US/ATs 已交由需求团队开发
 - 确认需求团队的开发计划契合开发团队的进度. 如果需求团队意识到有不可控风险 (例如原定和客户喝咖啡聊需求的时间必须改期) 将影响需求团队的开发进度, 我要提醒 EM 做好沟通, 及时管理好客户的期待值, 让客户知道责任在自己身上, 以及我们的调整.
 - 在拿到经由 QA 验证后的 US/ATs 后, 我要检查它们是否 *技术可行的/最优雅的*. 如果不是, 我有什么调整方案?
 - 我要和 BA/QA 一起审阅并最终决定 US/ATs 是否已稳定
 - 我要决定已稳定的 US/ATs 是否足以让开发团队动手, 如果有关键的 US/ATs 尚未稳定, 我要告诉 BA, 并将开始时间相应延期, 直至所有关键 US/ATs 经 BA/QA/PL 确认稳定
 - 我要让每一个开发人员一起参与这些将被放入计划的 US/ATs 候选列表进行估算, 我要得到 best/worst 的天数, 我要知道一些关键功能在不同开发人员眼中为何有不同的 best/worst
 - 如果需要 html 功能组的支持, 我要提前至少一个 Iteration 发出资源请求, 并获得来自 html 组的 best/worst 估算
 - 我要基于这些估算给出 Iteration Plan Draft 并发给 BA/EM/客户进行审阅, 我要提醒 EM 确保自己完全理解计划中的每一个细节, 尤其是里面涉及的 US/ATs 每个稳定版的 *每一个细节*; 我要提醒 BA 帮我确保 EM 确实在自己已理解的基础上让客户理解, 并得到客户对计划的 *官方认可* - 该认可由 EM 代表客户发出, 必须 *文档可溯*.
 - 如果计划确认中间, 有任何问题来自需求团队或客户, 我要及时回答, 必要的话, 重复 US/ATs 的稳定化过程, 修改出新版的 Iteration Plan Draft, 再次发给 BA/EM/客户进行审阅
 - 我要保证在下个迭代开始前将 Iteration Plan Draft 变成 Iteration Plan - 即得到 EM 代表客户的官方认可.
 - 如果 EM 不能及时认可计划, 默认答案是 "认可". 我将发出提醒, 告诉 EM 他/她未能及时认可, 我们已按原计划执行, 一切责任由 EM 承担.

迭代开始后
``````````

 - GH 上有没有新的帖子需要我回答/处理?
 - EM/BA/QA 有没有问题需要 IM/面对面和我交流?
 - 团队成员的精神状态如何? 有没有需要我帮忙的地方 (无论是技术的非技术的)?
 - 有没有之前未曾预知的困难出现? 我们能不能快速处理?
 - 如果有不易处理的情况出现, 而且它确切无疑将影响项目进度, 我要立即通知 EM 和客户, 以及提供相应的调整方案
 - 我要确保团队里每个人每天都有快乐舒适的心情集中精力做最好的产品
 - 如果项目中还有拦路石, 目前解决进度如何? 最坏情况及后备方案是什么?
 - 我要为每一个 checkpoint release 写 release notes
 - 客户有没有打乱我们流程的事情发生? 如果有, 我要明确指出, 悉心教育, 并归档该次行为的过程和结果
 - 我要保证迭代开始后, 一切按计划执行与验收, 不允许任何打乱计划的事情发生
 - 如果有万分紧急且重要的事情发生, 我会立即对现行计划进行调整并得到客户的官方认可, 然后执行调整后的计划
 - 我要同时开始准备下一个 Iteration Plan Draft. (参看上一节 "迭代开始前")
 - 就本次观察而言, 我们的估算是乐观了还是悲观了? 需要调整么?
 - 我的第六感告诉我, 有什么自己觉得不妥的事情存在么? 有的话我要立即使其清晰化, 并设法立即解决.

QA 的任务清单
-------------

迭代开始前
``````````

 - 我要从 PL 的 Overall Plan 中知道项目的关键 deadlines (alpha, beta, rc 等), 基于这些 deadlines 我要做出自己的 Overall QA Plan, 重点关注内容为: 保证这些会给客户看的 releases 的质量
 - 我拿到的来自 BA 的 US/ATs 是否可标为稳定版本?
 - 尚未稳定的 US/ATs 是哪些? 我有什么建议可以加速其稳定?
 - 我要跟踪好 US/ATs 的版本与状态 (已审核未稳定,已审核已稳定,未审核)
 - 经我确认稳定的 US/ATs, 我要拿着它们和 BA, PL 一起讨论/修改, 最终三人一起使其进入最终稳定版本

迭代开始后
``````````

 - 对稳定的 US/ATs 我将构造自己的 Test Cases
 - 我会在每个 Checkpoint Release 之后根据 Relase Notes, 对照自己构造的 Test Cases 检查产品的质量, 并报告问题给 PL
 - 我会跟踪和管理这些问题, 以及 PL 对这些问题的分配安排, 清楚知道每个问题会在什么时候被解决, 我据此给出测试安排
 - 每个 Checkpoint Release 测试完成后, 我应该通知 PL 测试的状态和测试的结果,以便 PL 发布 Release Notes

正式版发布前
````````````

 - 我要在达到约定产品发布时间点，正式版本发布前一个迭代,对前几个迭代的测试内容进行回归测试,综合检验前段时间产品质量.
 - 回归测试完成,我必须给PL提供一份测试报告以便PL可以正式发布版本,测试报告要明确指明进行了哪个测试,哪些测试通过,哪些测试未通过,还有哪些遗留问题,是否可以正式发布等.

Developer 的任务清单
--------------------

迭代开始前
``````````
 - 我要细读 PL 给我的 US/ATs, 然后根据自己的经验给出 best/worst 估算
 - 我要完全理解 US/ATs 中的每个细节, 有问题我要 PL 给我清楚的解释
 - 我要对自己给出的 best/worst 提供相应的理由, 协助 PL 清楚理解这一估算的含义
 - 对某个 US/ATs 我是不是没有把握给出估算? 是不是要先学习/研究一些技术后才能给出估算? 如果是, 我将要求把该任务的估算显式地分成两部分: 一是学习时间的估算, 二是学习后我才能给出的对任务的估算.
 - 如果我察觉到 PL 未曾察觉的问题, 我要立即让 PL 知道并理解

迭代开始后
``````````

 - 我坚信只要我把自己的任务按自己的估算做好, 我们的项目就会按时完成, 绝无延误!
 - 尽量挑选我最擅长/最喜欢的任务来做
 - 在不影响进度的情况下, 挑选对自己有挑战的任务来做
 - 每天早上开机第一件事就是同步代码, 并细心解决可能的冲突
 - 实现时若遇到自己未曾预见的问题, 且可能影响自己的 worst deadline 时, 我要立即告诉 PL, 以便 PL 安排/调整资源及时消除这一风险
 - 如果自己提前完成任务了, 剩下的时间: 一可以看看团队成员有没有需要帮忙的地方; 二可以挑下个迭代中你最擅长/最喜欢的任务来做; 三可以研究一些对项目后续有帮助的, 尚未解决的技术点; 四可以做点自己喜欢的 "课外学习"; 五可以玩 ;)
 - 我今天状态不佳的话, 我要告诉 PL, 以便调整
 - 我要积累自己的 PSP 数据, 以提高自己的估算精度
 - 我要在开发中不断学习, 以提高自己的能力, 实践/追寻传说中的 Best Practice
 - 在完成任务时, 我牢记 "KISS - Keep It Simple, Stupid!", 永远选择代价最小, 最容易的实现 - 必要时, 我会寻求 PL/Architect 的指导
 - 如果我有最简单而且最优雅的实现, just do it!
 - 我对自己写的代码非常骄傲!
 - 如果我写了一段很漂亮的代码, 我要秀给大家看!
 - 我要让自己的代码坚不可摧!
 - 随着我知识的积累, 我会不时回顾自己以前的代码, 并在适当时候以更优雅的方式重构
 - 无论完成与否, 每天下班之前至少提交一次代码

维护阶段的角色任务清单
======================

阶段特点及参与人员
------------------

在产品交付客户之后, 项目进入维护阶段. 这一时期的特点是:

 - 用户驱动的资源分配
 - 任务本身多为 bug 修复和小量调整

PL 的任务清单
-------------

 - 定时关注来自客户的信息, 根据情况解答问题或分配人力资源
 - 定时关注产品运行状况, 尤其是安全方面
 - 紧急事件我必须立即处理
 - 审阅客户提交的 bug 报告与调整需求, 过滤, 转换成 ticket, 交给最合适的开发人员估算并处理
 - 如果任务较多, 我同样会形成计划, 提交客户审阅并执行, 验收
 - 我会安排好将更新先部署到测试服务器, 让 BA 提醒客户校验, 并最终安排将这些更新发布到生产服务器

QA 的任务清单
-------------

 - 我会校验开发人员关闭的 bug 列表, 确保修复质量
 - 我会把通过我校验的 bug fix 列表提交给 PL, 让 PL 可以发布 release notes

Developer 的任务清单
--------------------

 - 我会对任务给出合适的估算, 并在估算时间内完成之
 - 我会以自己的能力确保我关闭的问题绝无返工 - 我绝不让 QA 因质量问题 reopen 我的 ticket :)

TODO
====

 - 志斌提出 Code Review 要在计划中体现, 我目前尚无在流程中整合该部分内容的经验和想法, 等补充些知识后, 有更清晰的概念再试验性加入 - 我希望自己实际操作过后再正式分享经验. 也希望其他 PL 同学早点探索 :)
